{"version":3,"sources":["assets/icons/clear-24px.svg","components/addName/addName.component.tsx","components/nameList/nameList.component.tsx","components/randomPickerContainer/randomPickerContainer.component.tsx","pages/dashboard/dashboard.page.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddNameComponent","state","name","handleSubmit","e","preventDefault","props","onValueSubmited","setState","handleChange","target","value","this","onSubmit","className","htmlFor","id","placeholder","type","onChange","Component","NameListComponent","nameList","removeItemCallBack","listTitle","map","index","key","href","onClick","src","clearIcon","alt","RandomPickerContainer","randomPickClicked","randomPickedList","randomValues","filter","v","includes","length","newRandomPickedList","push","Math","floor","random","removeNameCallBack","newList","val","removeRandomNameCallBack","addName","DashboardPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3da6e2d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clear-24px.6a19414b.svg\";","import React, { Component } from 'react';\n\ntype addNameState = {\n    name: String\n}\n\ntype addNameProps = {\n    onValueSubmited: Function\n}\n\nexport default class AddNameComponent extends Component<addNameProps, addNameState> {\n\n    // Difault state setup\n    state = {\n        name: \"\"\n    }\n\n    // Handle on submit form event\n    handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        this.props.onValueSubmited(this.state.name);\n        this.setState({ name: \"\" })\n    }\n\n    // Update state on change\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ name: e.target.value })\n    }\n\n    // render form\n    render() {\n        const { name } = this.state\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"colFormLabelSm\"\n                        className=\"\">Insert a name</label>\n                    <div className=\"\">\n                        <input className=\"form-control form-control-sm\" \n                        id=\"colFormLabelSm\" \n                        placeholder=\"type a new name...\" \n                        type=\"text\" value={name} onChange={this.handleChange} />\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}","import React, { FunctionComponent } from 'react'; // importing FunctionComponent\nimport clearIcon from \"../../assets/icons/clear-24px.svg\"\n\ntype NameListComponentProps = {\n    nameList: Array<string>,\n    removeItemCallBack: Function,\n    listTitle: String\n}\n\nexport const NameListComponent: FunctionComponent<NameListComponentProps> = ({ nameList, removeItemCallBack, listTitle }) => {\n\n    return (\n        <div className=\"list-group\">\n            <div className=\"list-group-item list-group-item-action active\">\n                {listTitle}\n            </div>\n            {nameList.map((name, index) => (\n                <div className=\"list-group-item list-group-item-action\" key={index}>\n                    {name}\n                    <a\n                        href=\"#\"\n                        className=\"btn  float-right\"\n                        onClick={() => { removeItemCallBack(index, name) }}>\n                        <img src={clearIcon} alt=\"clear {name}\" />\n                    </a>\n                </div>\n\n            ))}\n        </div>\n    )\n\n}","import React, { Component } from 'react';\nimport \"./randomPickerContainer.component.scss\"\nimport AddNameComponent from '../addName/addName.component';\nimport { NameListComponent } from '../nameList/nameList.component';\n\ntype RandomPickState = {\n    nameList: Array<string>,\n    randomPickedList: Array<string>\n}\n\nexport default class RandomPickerContainer extends Component<{}, RandomPickState> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            nameList: [\"Petros\", \"Chai\", \"Inspired\"],\n            randomPickedList: [\"Petros\"]\n        };\n    }\n\n    // Random pick \n    randomPickClicked = () => {\n        const { nameList, randomPickedList } = this.state;\n        const randomValues: Array<string> = nameList.filter(v => !randomPickedList.includes(v));\n\n        if (randomValues.length === 0) {\n            return;\n        }\n\n        const newRandomPickedList = [...randomPickedList];\n        newRandomPickedList.push(randomValues[Math.floor(Math.random() * randomValues.length)])\n        this.setState({\n            randomPickedList: newRandomPickedList\n        })\n    }\n\n    // Remove name from list & randomList if exist\n    removeNameCallBack = (index: number, value: string) => {\n        const newList = this.state.nameList.filter((val: string) => {\n            return val !== value\n        })\n        this.setState({\n            nameList: newList\n        })\n        this.removeRandomNameCallBack(index, value);\n    }\n\n    // Remove name from random list\n    removeRandomNameCallBack = (index: number, value: string) => {\n        const newList = this.state.randomPickedList.filter((val) => {\n            return val !== value\n        })\n        this.setState({\n            randomPickedList: newList\n        })\n    }\n\n    // Add New name in list \n    addName = (value: string) => {\n        const newList = [...this.state.nameList];\n        if (newList.includes(value)) {\n            return;\n        }\n        newList.push(value);\n        this.setState({ nameList: newList })\n    }\n\n    // Render Container\n    render() {\n        return (\n            <div className=\"container mt-4\">\n\n                <div className=\"row\">\n                    <div className=\"col-sm-6\">\n                        <AddNameComponent onValueSubmited={this.addName} />\n                    </div>\n                    <div className=\"col-sm-6\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"colFormLabelSm\"\n                                className=\"\">Randomly select</label>\n                            <button className=\"btn btn-light form-control\" onClick={this.randomPickClicked}>Select Name</button>\n                        </div>\n\n                    </div>\n\n                </div>\n\n\n                <div className=\"row\">\n                    <div className=\"col-sm-6 mt-4\">\n                        <NameListComponent\n                            nameList={this.state.nameList}\n                            removeItemCallBack={this.removeNameCallBack}\n                            listTitle=\"Name List\" />\n                    </div>\n                    <div className=\"col-sm-6 mt-4\">\n\n                        <NameListComponent\n                            nameList={this.state.randomPickedList}\n                            removeItemCallBack={this.removeRandomNameCallBack}\n                            listTitle=\"Random Picked\" />\n                    </div>\n                </div>\n\n\n\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './dashboard.page.scss';\nimport RandomPickerContainer from '../../components/randomPickerContainer/randomPickerContainer.component';\n\nconst DashboardPage: React.FC = () => {\n  return (\n    <div>\n\n      {/* Header */}\n      <nav className=\"navbar navbar-light bg-light\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"#\">Random Picker</a>\n        </div>\n      </nav>\n\n      <RandomPickerContainer />\n    </div>\n  );\n}\n\nexport default DashboardPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport DashboardPage from './pages/dashboard/dashboard.page';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DashboardPage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}